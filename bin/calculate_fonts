#!/usr/bin/env node
var Nightmare = require('nightmare');
var path      = require('path');
var fs        = require('fs');
var argv      = require('minimist')(process.argv.slice(2));

var nightmare = Nightmare({
  show: argv.show
});

var svgTemplate = fs.readFileSync(
  path.join(process.cwd(), 'test/fixtures/fonts.svg'), { encoding: 'utf-8' });

var fontSizes  = [8, 10, 12, 16, 20, 32, 48];
if (argv.s || argv.sizes) {
  fontSizes = (argv.e || argv.extent)
    .replace(/[^0-9.,-]/g, '')
    .split(/\,/)
    .map(parseFloat);
}

var verbose = !!(argv.v || argv.verbose);

var fontFamily = argv.f || argv.fontFamily || 'Arial, Helvetica, sans-serif';


nightmare
  .goto('about:blank')
  .evaluate(function (svgTemplate, fontSizes, fontFamily) {
    document.body.innerHTML = svgTemplate;
    var a = document.querySelector('#lower');
    var A = document.querySelector('#upper');
    var n = document.querySelector('#n');
    var s = document.querySelector('#s');

    function measure(el) {
      var symbols = el.innerHTML.length;
      var length = el.getComputedTextLength();
      var bbox = el.getBBox();
      return {
        length: length,
        width: bbox.width,
        height: bbox.height,
        n: symbols,
        avg: length / symbols
      };
    }

    return fontSizes.map(function(size) {
      var res = {};
      var ids = ['a', 'A', 'n', 's'];

      [a, A, n, s].forEach(function (el, i) {
        el.setAttribute('font-size', size);
        el.setAttribute('font-family', fontFamily);
        res[ids[i]] = measure(el);
      });

      return {
        size: size,
        avg: Object.keys(res).reduce(function(acc, id) {
          return acc + res[id].avg;
        }, 0) / Object.keys(res).length,
        height: Object.keys(res).reduce(function(acc, id) {
          return acc + res[id].height;
        }, 0) / Object.keys(res).length,
        measures: res
      };
    });
  }, svgTemplate, fontSizes, fontFamily)
  .end()
  .then(function(res) {
    var result = JSON.stringify(result, 0, 2);
    if (!verbose) {
      result = res.map(function (values) {
        return {
          avg: values.avg,
          size: values.size,
          height: values.height
        };
      });
    } else {
      result = res;
    }
    result = JSON.stringify({
      fontFamily: fontFamily,
      values: result
    }, 0, 2);
    process.stdout.write(result);
    process.exit(0);
  });
